pour creer un depot distant git :
- aller creer le depot sur gitLab ou gitHub
- taper git remote add https//:.....
- creer ses branches via git branch -M nom_de_branc ou ( git branch pour les branches classiques)
- lier une branch comme branch origin du projet via git push --set-upstream origin main 
- l'erreur 404 : la page n'a pas ete trouver
- l'erreur 503: la video google n'est pas encore disponible
- il y'a plus de 70 codes de statut http 
- les codes de status peuvent etre classer en 5 grandes categories :
    1xx: l'information ( il donne des informations au niveau du protocole de transfert lui meme. ce sont des donnees ...aucune donnes n'est reelement transmises entre le client et le serveur)
    2xx:  la requette accpeter traiter avec succes
    3xx: la redirection : le client veut acceder a une ressource qui  a ete deplacer  
    4xx: le client s'est planter ( erreur d'acces)
    5xx: erreur de serveur ( erreur lie au serveur lui meme)
    -  il faut toujours fournir des reponses d'erreur avec des codes de statut les plus connus afin de permettre aux utilisateurs de l'api de le comprendre facilement 
    - les codes a retenir : 
        - 200:succes
        - 400: le client a mal utiliser l'api
        - 500: lorsque c'est la faute du serveur 
        - 404 : le client qui demande une ressource indisponible en bd
        - 401 : les clients qui ne sont pas auhtentifier a une ressource ( n'ont pas autoriser a cette ressource)
        - 403 : les clients autorise mais qui peuvent pas acceder a une ressource non autoriser.
- on distingue deux categories d'erreur :  les erreurs techniques et les erreurs metiers 
- les erreurs techniques ce sont des erreurs qui sont du au dysfonctionnemt de notre api ou lies requetes des utilisateurs
- les erreurs metiers sont des erreurs qui peuvent subvenir par exemple lorsque le user fournis les informations comme il se faut mais souvent pas dans le bon format
///////////LES VALIDATEURS////////////////////////////////
- Les contraintes et les validateurs 
- Les contraintes : ils sont defini sur notre model cote bd: peu importe , une requette sera envoye a notre base de donnees
- Les validateurs : ils sont defini cote code : s'ils echouent alors aucune requette ne sera envoyer a la bd
cela est important car  il permet d'eviter d'interroger inutilement notre BD.
- les validateurs ne sont prises en charges que pour les requtes UPDATE(PUT) ET CREATE(PUSH)
- le validateurs allowNull est a la fois un validateurs coté code et une contraintes coté BD
il n'empeche pas par contre le faite que l'utilisateurs saisissent " ou 0 dans les champs concerné
pour cela il faut uitliser un autre validateur comme notNull
- On voit bien qu'on pourrait se dire que seules les validateurs cotes code suiffisent car ils vont meme bloquer d'envoyer des requetes inutiles au serveur
mais alors a quoi  sert les contraintes cotes code .
les contraintes permet de gerer l'integrite des donnees ( coté base de donnée) lorsque on ne peut pas le faire facilement avec sequelize cote code
par exemple : si on veut s'assurer de l'uniciter des pokemoons dans la BD , si on doit faire ca coté code , cela pourrait etre compliqué car on allait 
a chaque fois charger tout les pokemons dans la base de donnee et ensuite effectuer des traitement pour comparer les valeurs afin de voir si la nouvelle valeur a inserer 
n'a pas ete prise pas( ca a l'air complique) c'est pourquoi il preferait de le faire coté BD
- REMARQUE : sequelize permet a la fois de definir les contraintes et les validateurs ....il faut juste savoir que les contraintes sont hors de la partie
Validate . tandisque les autres le sont ( DANS LE MODEL POKEMON.js)
- seules CREATE ET UPDATE sont concerner par la contrainte : unique ( contrainte d'unicité)
- il faut toujours crypter les donnnees que nous mettons dans la base de donne . pour cela on peut installer un module qui nous permet de le faire 
il s'agit en effet de bcrypt. ( npm install bcrypt --save)
-JWT : Json Web Token 
/////////////////////////////// HERBERGER NOTRE APPLICATION EN LIGNE:DEPLOIEMENT EN PRODUCTION/////////////////////////////////////
1-CREER LE PROJET SUR LA PLATEFORME HEROKU
2-PREPARER LE PROJET EN LOCAL POUR LE DEPLOIMENT 
3-DEPLOYER L'API REST COMPLETE
REMARQUE : ON DOIT HEBERGER UN SERVER WEB ECRIT EN NODE.JS , UNE API REST REALISEE AVEC EXPRESS,UNE BD AVEC MYSQL
////// ETAPES DE DEPLOIEMENT//////
1-remplacer dans le fichier Itry.js le port utilser par port = 4000||process.env.PORT : comme lorsque on sera en production , heruku va lui meme mettre le numero de port dans  'process.env.PORT'
2-remplacer dans le fichier package.json
"scripts": {
    "start": "nodemon Itry.js" ,
  },
  par "scripts": {
    "start": "node Itry.js" ,
    "dev": "nodemon Itry.js"
  },
  cela permettra de lancer le script "dev" en developpement et "start" en production
3-deployer maitenant express.js 
on ajoute dans le script precedent pour avoir ceci  "scripts": {
    "start": " NODE_ENV = production node Itry.js" ,
    "dev": " NODE_ENV = developement nodemon Itry.js"
  },
  dans notre cas on ne le ferra pas ...car nous n'allons pas deployer l'application pour le moment
  4-Ne pas deployer les dependances de developement


//////////////////////////////// UTILISER L'API DEPUIS UNE APPLICATION /////////////////////////
- les requetes get et post sont les requetes simples 
- les requetes put , delete , et update sont des requetes complexes.
- pour autoriser les applications a utiliser  notre api ,  il faut implementer la norme cors dans l'api
- cette maniere d'implementer depend du language de programation . mais pour node , voici comment il faut faire:
  - il faut d'abord installer le packet cors via la commaande :  npm install cors --save
  - ce packet s'utilise comme un middleware